use composer to validate data .


class ==> class is a blue print |- model 

object is an instance of a class .
oop pillars ==> abstraction | encapsulation | polymorphism | inheritance . 
self and this . 
interface | abtract | abtract methods 

static method 
mcd ==> entity ==> identifiant ==> les proprietés ==> association ==> les cardinality . 

mld representation graphique ==> basant sur le mld en peut generer le mcd . 

abtract class | interface 

interface ==> not have proprieties . all methods must be public 
abtract ==> is a class wich contains at least one abtsrdact method . 

encapsulation ==> wrapping up data memberes in one signle unit called class .

Aggregation implies a relationship where the child can exist independently of the parent. Example: Class (parent) and Student (child). Delete the Class and the Students still exist.
Composition implies a relationship where the child cannot exist independent of the parent. Example: House (parent) and Room (child). Rooms don't exist separate to a House.

help us to think in terms of real world objects . 

abstraction ==> show whayt only is necessary 
encapsulation ==> hide complexity . implements abstraction .


dashboard that individual users control and customize. Every user controls the data they wish to see as well as the dashboard’s structure and layout. 